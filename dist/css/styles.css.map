{"version":3,"file":"css/styles.css","mappings":"AAAA,2ZAiFE,SACA,aACA,eACA,SACA,UACA,wBAGF,8EAWE,cAGF,KACE,cAGF,MAEE,gBAGF,aAEE,YAGF,wDAIE,WACA,aAGF,MACE,yBACA,iBAGF,OACE,gBACA,SACA,eACA,aACA,UAGF,qBAGE,oDAGF,mBACE,6DAGF,uMAIE,aAGF,QACE,qDACA,yGACA,gBAGF,IACE,YACA,qCAGF,YAEE,eAGF,YACE,YACA,WAGF,mBACE,6DC/KF,KACE,kCCMa,CDLb,eACA,iBELF,WACE,cACA,4BC+OM,wBDjPR,WAKI,8BC4OI,yBDjPR,WASI,8BELJ,WACE,kBCL+B,CDM/B,eCL4B,CFgPtB,wBC7OR,WAKI,mBCP8B,CDQ9B,gBCP2B,EDW/B,mBACE,mBDkOM,wBCnOR,mBAII,oBAIJ,kBACE,yCEQe,CFPf,eACA,gBACA,iBACA,gBDsNM,wBC3NR,kBAQI,eACA,kBDkNI,yBC3NR,kBAaI,gBD8MI,wBC1MR,wBAEI,4BAIJ,iBACE,wBC1CsB,CD4CtB,kCACE,gBDgMI,wBCjMN,kCAII,iBAKN,yBACE,kEACA,6DACA,6BACA,SACA,gBACA,eACA,qDACA,YACA,6EACA,gBACA,iBACA,gBACA,gGACA,WD0KM,wBCxLR,yBAiBI,YACA,eAEA,8DAEE,wBC1E4B,CD4E5B,oEACE,UC5E0B,CD+E5B,0OAEE,SCjF0B,EDuF9B,wEACE,aAGF,yEACE,cAKN,uBACE,kCH/Fa,CGgGb,eACA,gBACA,iBACA,SACA,0EAGF,yBACE,yCElFe,CFmFf,eACA,gBACA,iBACA,gBD4HM,wBCjIR,yBAQI,eACA,kBDwHI,yBCjIR,yBAaI,gBAIJ,sBACE,kCACA,YACA,kBACA,WAGF,uDAEE,YChIyB,CDiIzB,YACA,SACA,kBACA,QACA,wEACA,wEACA,WAGF,4BACE,aAGF,uBACE,SACA,gBACA,kBAEA,qHAIE,WAIJ,yBACE,eACA,iBACA,sBDyEM,wBC5ER,yBAMI,yBAIA,6KAKE,gBD6DE,wBClEJ,6KAQI,iBAKN,sCACE,kBACA,mBAEA,2CACE,YG7LN,KACE,6DACA,SACA,gBACA,eACA,0EACA,eACA,gBACA,oEACA,gBACA,uBACA,kBACA,qBACA,sMAEA,SACE,YACA,kBACA,wEACA,WAGF,kBACE,wBC1BqB,CD2BrB,UCzBqB,CD2BrB,sBACE,SC5BmB,CD+BrB,gDAEE,wBClCyB,CDqC3B,+BACE,6BACA,wBCrCuB,CDsCvB,aCrC2B,CDuC3B,mCACE,YCxCyB,CD2C3B,0EAEE,wBC5C+B,CD6C/B,wBC5C2B,CD6C3B,UC5C+B,CD8C/B,kFACE,SC/C6B,CDoDnC,2DAEE,mCCrD4B,CDsD5B,aCrD4B,CDsD5B,oBAIJ,oBACE,qBCxDuB,CDyDvB,aCtDuB,CDwDvB,wBACE,YCzDqB,CD4DvB,oDAEE,wBChE2B,CDiE3B,UChE2B,CDkE3B,4DACE,SCnEyB,CDuE7B,iCACE,6BACA,qBCvEyB,CDwEzB,UCvE6B,CDyE7B,qCACE,SC1E2B,CD6E7B,8EAEE,qBC9EiC,CD+EjC,aC9EiC,CDgFjC,sFACE,YCjF+B,CDsFrC,+DAEE,6BACA,wBCxF0B,CDyF1B,aCxF8B,CDyF9B,oBAIJ,gBACE,eACA,gBACA,iB","sources":["webpack://@verndale/toolkit/./src/scss/core/_reset.scss","webpack://@verndale/toolkit/./src/scss/core/_typography.scss","webpack://@verndale/toolkit/./src/scss/core/_variables.scss","webpack://@verndale/toolkit/./src/scss/core/_global.scss","webpack://@verndale/toolkit/./node_modules/sass-mq/_mq.scss","webpack://@verndale/toolkit/./node_modules/@verndale/front-end-components/lib/C-FMT-1-accordions-module/_styles.scss","webpack://@verndale/toolkit/./node_modules/@verndale/front-end-components/lib/C-FMT-1-accordions-module/_variables.scss","webpack://@verndale/toolkit/./node_modules/@verndale/front-end-components/lib/_theme.scss","webpack://@verndale/toolkit/./node_modules/@verndale/front-end-components/lib/button/_styles.scss","webpack://@verndale/toolkit/./node_modules/@verndale/front-end-components/lib/button/_variables.scss"],"sourcesContent":["h1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  border: 0;\n  font: inherit;\n  font-size: 100%;\n  margin: 0;\n  padding: 0;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol,\nul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote::before,\nblockquote::after,\nq::before,\nq::after {\n  content: \"\";\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nbutton {\n  background: none;\n  border: 0;\n  cursor: pointer;\n  font: inherit;\n  outline: 0;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\ninput[type=\"search\"] {\n  appearance: none;\n}\n\ninput[type=\"search\"]::-webkit-search-decoration,\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-results-button,\ninput[type=\"search\"]::-webkit-search-results-decoration {\n  display: none;\n}\n\npicture {\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n}\n\nimg {\n  height: auto;\n  object-fit: cover;\n}\n\npicture,\nimg {\n  max-width: 100%;\n}\n\npicture img {\n  height: 100%;\n  width: 100%;\n}\n\ninput[type=\"number\"] {\n  appearance: none;\n}\n","//Typography\n\nbody {\n  font-family: $primary-font;\n  font-size: 18px;\n  line-height: 1.78;\n}\n","//Variables\n$mq-breakpoints: (\n  mobile: 360px,\n  tablet: 768px,\n  tabletLandscape: 1024px,\n  desktop: 1280px,\n  wide: 1600px\n);\n\n$primary-font: \"Questrial\", sans-serif;\n\n// .container class\n$container-padding-mobile: 20px;\n$container-padding-desktop: 80px;\n$container-padding-wide: 120px;\n",".container {\n  margin: 0 auto;\n  max-width: calc(100% - #{$container-padding-mobile * 2});\n\n  @include mq(desktop) {\n    max-width: calc(100% - #{$container-padding-desktop * 2});\n  }\n\n  @include mq(wide) {\n    max-width: calc(100% - #{$container-padding-wide * 2});\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and â€¦`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, printâ€¦\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import\n\"../theme\",\n\"variables\";\n\n.accordion {\n  margin-bottom: $accordion-mobile-margin-bottom;\n  margin-top: $accordion-mobile-margin-top;\n\n  @include mq(desktop) {\n    margin-bottom: $accordion-desktop-margin-bottom;\n    margin-top: $accordion-desktop-margin-top;\n  }\n}\n\n.accordion__header {\n  margin-bottom: 29px;\n\n  @include mq(desktop) {\n    margin-bottom: 60px;\n  }\n}\n\n.accordion__title {\n  font-family: $accordion-item-title-font-family;\n  font-size: 30px;\n  font-weight: 700;\n  line-height: 1.13;\n  margin: 0 0 10px;\n\n  @include mq(desktop) {\n    font-size: 40px;\n    line-height: 1.09;\n  }\n\n  @include mq(wide) {\n    font-size: 44px;\n  }\n}\n\n.accordion__description {\n  @include mq(desktop) {\n    max-width: calc(66% - 51px);\n  }\n}\n\n.accordion__item {\n  border: $accordion-item-border;\n\n  & + .accordion__item {\n    margin-top: 20px;\n\n    @include mq(desktop) {\n      margin-top: 30px;\n    }\n  }\n}\n\n.accordion__item-trigger {\n  align-items: center;\n  appearance: none;\n  background-color: transparent;\n  border: 0;\n  border-radius: 0;\n  cursor: pointer;\n  display: flex;\n  height: auto;\n  justify-content: space-between;\n  min-height: 60px;\n  padding: 9px 25px;\n  text-align: left;\n  transition: background-color 0.2s ease-in-out;\n  width: 100%;\n\n  @include mq(desktop) {\n    height: 50px;\n    padding: 0 25px;\n\n    &:hover,\n    &:focus {\n      background-color: $accordion-item-focus-background;\n\n      h3 {\n        color: $accordion-item-focus-text-color;\n      }\n\n      .accordion__item-icon-plus,\n      .accordion__item-icon-minus {\n        fill: $accordion-item-focus-text-color;\n      }\n    }\n  }\n\n  &[aria-expanded=\"true\"] {\n    .accordion__item-icon-plus {\n      display: none;\n    }\n\n    .accordion__item-icon-minus {\n      display: block;\n    }\n  }\n}\n\n.accordion__item-title {\n  font-family: $accordion-item-font-family;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.78;\n  margin: 0;\n  transition: color 0.2s ease-in-out;\n}\n\n.accordion__item-heading {\n  font-family: $accordion-item-heading-font-family;\n  font-size: 21px;\n  font-weight: 700;\n  line-height: 1.19;\n  margin: 0 0 10px;\n\n  @include mq(desktop) {\n    font-size: 19px;\n    line-height: 1.33;\n  }\n\n  @include mq(wide) {\n    font-size: 24px;\n  }\n}\n\n.accordion__item-icon {\n  flex-shrink: 0;\n  height: 14px;\n  position: relative;\n  width: 14px;\n}\n\n.accordion__item-icon-plus,\n.accordion__item-icon-minus {\n  fill: $accordion-item-icon-fill;\n  height: 14px;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transition: fill 0.2s ease-in-out;\n  width: 14px;\n}\n\n.accordion__item-icon-minus {\n  display: none;\n}\n\n.accordion__item-panel {\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n\n  video,\n  picture,\n  img,\n  iframe {\n    width: 100%;\n  }\n}\n\n.accordion__item-content {\n  font-size: 18px;\n  line-height: 1.78;\n  padding: 2px 20px 20px;\n\n  @include mq(desktop) {\n    padding: 28px 100px 45px;\n  }\n\n  * {\n    & + video,\n    & + picture,\n    & + img,\n    & + iframe,\n    & + .buttons-row {\n      margin-top: 20px;\n\n      @include mq(desktop) {\n        margin-top: 60px;\n      }\n    }\n  }\n\n  .buttons-row {\n    margin-left: -10px;\n    margin-right: -10px;\n\n    .btn {\n      margin: 10px;\n    }\n  }\n}\n","$accordion-mobile-margin-bottom: map-get($module-spacing, \"mobile\") !default;\n$accordion-mobile-margin-top: map-get($module-spacing, \"mobile\") !default;\n$accordion-desktop-margin-bottom: map-get($module-spacing, \"desktop\") !default;\n$accordion-desktop-margin-top: map-get($module-spacing, \"desktop\") !default;\n$accordion-item-border: solid 1px map-get($theme-colors, \"primary\") !default;\n$accordion-item-focus-background: map-get($theme-colors, \"primary\") !default;\n$accordion-item-focus-text-color: #FFF !default;\n$accordion-item-font-family: $primary-font !default;\n$accordion-item-title-font-family: $secondary-font !default;\n$accordion-item-heading-font-family: $secondary-font !default;\n$accordion-item-icon-fill: map-get($theme-colors, \"primary\") !default;\n","// sass-mq overrides\n$mq-breakpoints: (\n  mobile: 360px,\n  tablet: 768px,\n  tablet-landscape: 1024px,\n  desktop: 1280px,\n  wide: 1600px\n) !default;\n\n// default theme\n$theme-colors: (\n  primary: #06847b,\n  primary-dark: #1e3f36,\n  primary-light: #6f8f89,\n  primary-gray: #4a4a4a,\n  primary-light-gray: #e5e5e5,\n  secondary-light-gray: #dddddd,\n  warning: #fb9300,\n  critical: #f54748\n) !default;\n\n// width and spacing\n$max-width: 1840px !default;\n\n$module-spacing: (\n  mobile: 60px,\n  desktop: 150px\n) !default;\n\n// fonts\n$primary-font: 'Open Sans', sans-serif !default;\n$secondary-font: 'Barlow Condensed', sans-serif !default;\n","@import\n\"../theme\",\n\"variables\";\n\n.btn {\n  appearance: none;\n  border: 0;\n  border-radius: 0;\n  cursor: pointer;\n  display: inline-flex;\n  font-size: 18px;\n  font-weight: 600;\n  justify-content: center;\n  min-width: 200px;\n  padding: 12px 24px 14px;\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out;\n\n  svg {\n    height: 30px;\n    margin-right: 17px;\n    transition: fill 0.2s ease-in-out;\n    width: 30px;\n  }\n\n  &.btn--primary {\n    background-color: $btn-primary-background;\n    color: $btn-primary-text-color;\n\n    svg {\n      fill: $btn-primary-text-color;\n    }\n\n    &:hover,\n    &:focus {\n      background-color: $btn-primary-focus-background;\n    }\n\n    &.btn--outline {\n      background-color: transparent;\n      border: $btn-primary-outline-border;\n      color: $btn-primary-outline-text-color;\n\n      svg {\n        fill: $btn-primary-outline-text-color;\n      }\n\n      &:hover,\n      &:focus {\n        background-color: $btn-primary-outline-focus-background;\n        border: $btn-primary-outline-focus-border;\n        color: $btn-primary-outline-focus-text-color;\n\n        svg {\n          fill: $btn-primary-outline-focus-text-color;\n        }\n      }\n    }\n\n    &:disabled,\n    &.btn--disabled {\n      background-color: $btn-primary-disabled-background;\n      color: $btn-primary-disabled-text-color;\n      pointer-events: none;\n    }\n  }\n\n  &.btn--secondary {\n    background-color: $btn-secondary-background;\n    color: $btn-secondary-text-color;\n\n    svg {\n      fill: $btn-secondary-text-color;\n    }\n\n    &:hover,\n    &:focus {\n      background-color: $btn-secondary-focus-background;\n      color: $btn-secondary-focus-text-color;\n\n      svg {\n        fill: $btn-secondary-focus-text-color;\n      }\n    }\n\n    &.btn--outline {\n      background-color: transparent;\n      border: $btn-secondary-outline-border;\n      color: $btn-secondary-outline-text-color;\n\n      svg {\n        fill: $btn-secondary-outline-text-color;\n      }\n\n      &:hover,\n      &:focus {\n        background-color: $btn-secondary-outline-focus-background;\n        color: $btn-secondary-outline-focus-text-color;\n\n        svg {\n          fill: $btn-secondary-outline-focus-text-color;\n        }\n      }\n    }\n\n    &:disabled,\n    &.btn--disabled {\n      background-color: transparent;\n      border: $btn-secondary-disabled-border;\n      color: $btn-secondary-disabled-text-color;\n      pointer-events: none;\n    }\n  }\n\n  &.btn--small {\n    font-size: 14px;\n    min-width: 100px;\n    padding: 5px 20px;\n  }\n}\n","// Primary button\n$btn-primary-background: map-get($theme-colors, \"primary\") !default;\n$btn-primary-focus-background: map-get($theme-colors, \"primary-dark\") !default;\n$btn-primary-text-color: #FFF !default;\n$btn-primary-outline-border: solid 1px map-get($theme-colors, \"primary\") !default;\n$btn-primary-outline-text-color: map-get($theme-colors, \"primary\") !default;\n$btn-primary-outline-focus-background: map-get($theme-colors, \"primary-dark\") !default;\n$btn-primary-outline-focus-border: solid 1px map-get($theme-colors, \"primary-dark\") !default;\n$btn-primary-outline-focus-text-color: #FFF !default;\n$btn-primary-disabled-background: rgba(6, 132, 123, 0.2) !default;\n$btn-primary-disabled-text-color: map-get($theme-colors, \"primary-light\") !default;\n\n// Secondary button\n$btn-secondary-background: #FFF !default;\n$btn-secondary-focus-background: map-get($theme-colors, \"primary\") !default;\n$btn-secondary-focus-text-color: #FFF !default;\n$btn-secondary-text-color: map-get($theme-colors, \"primary\") !default;\n$btn-secondary-outline-border: solid 1px #FFF !default;\n$btn-secondary-outline-text-color: #FFF !default;\n$btn-secondary-outline-focus-background: #FFF !default;\n$btn-secondary-outline-focus-text-color: map-get($theme-colors, \"primary-dark\") !default;\n$btn-secondary-disabled-border: solid 1px map-get($theme-colors, \"primary-light\") !default;\n$btn-secondary-disabled-text-color: map-get($theme-colors, \"primary-light\") !default;\n"],"names":[],"sourceRoot":""}